{"ast":null,"code":"import axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { FETCH_DATA_FAILURE, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS } from './dataTypes';\nexport const fetchDataRequest = () => {\n  return {\n    type: FETCH_DATA_REQUEST\n  };\n};\nexport const fetchDataSuccess = data => {\n  return {\n    type: FETCH_DATA_SUCCESS,\n    payload: data\n  };\n};\nexport const fetchDataFailure = error => {\n  return {\n    type: FETCH_DATA_FAILURE,\n    payload: error\n  };\n};\nconst initialState = {\n  loading: false,\n  data: {},\n  error: ''\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_DATA_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_DATA_SUCCESS:\n      return { ...state,\n        loading: false,\n        data: action.payload,\n        error: ''\n      };\n\n    case FETCH_DATA_FAILURE:\n      return { ...state,\n        loading: false,\n        data: {},\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet url = 'http://localhost:3001/api/book?page=';\nexport const fetchData = num => {\n  return dispatch => {\n    dispatch(fetchDataRequest);\n    axios.get(url + num).then(response => {\n      const data = response.data;\n      dispatch(fetchDataSuccess(data));\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(fetchDataFailure(errorMsg));\n    });\n  };\n};\nlet url2 = 'http://localhost:3001/api/book?page=';\nexport const fetchDataUpdate = num => {\n  return dispatch => {\n    dispatch(fetchDataRequest);\n    axios.get(url2 + num).then(response => {\n      const data = response.data;\n      dispatch(fetchDataSuccess(data));\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(fetchDataFailure(errorMsg));\n    });\n  };\n};\nexport default dataReducer;","map":{"version":3,"sources":["/home/mgapinska/Dokumenty/books-shop-app/src/redux/server/data.js"],"names":["axios","useSelector","FETCH_DATA_FAILURE","FETCH_DATA_REQUEST","FETCH_DATA_SUCCESS","fetchDataRequest","type","fetchDataSuccess","data","payload","fetchDataFailure","error","initialState","loading","dataReducer","state","action","url","fetchData","num","dispatch","get","then","response","catch","errorMsg","message","url2","fetchDataUpdate"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,QAA2E,aAA3E;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACrC,SAAO;AACNC,IAAAA,IAAI,EAAEH;AADA,GAAP;AAGA,CAJM;AAMP,OAAO,MAAMI,gBAAgB,GAAIC,IAAD,IAAU;AACzC,SAAO;AACNF,IAAAA,IAAI,EAAEF,kBADA;AAENK,IAAAA,OAAO,EAAED;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAME,gBAAgB,GAAIC,KAAD,IAAW;AAC1C,SAAO;AACNL,IAAAA,IAAI,EAAEJ,kBADA;AAENO,IAAAA,OAAO,EAAEE;AAFH,GAAP;AAIA,CALM;AAOP,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,KADW;AAEpBL,EAAAA,IAAI,EAAE,EAFc;AAGpBG,EAAAA,KAAK,EAAE;AAHa,CAArB;;AAMA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACV,IAAf;AACC,SAAKH,kBAAL;AACC,aAAO,EACN,GAAGY,KADG;AAENF,QAAAA,OAAO,EAAE;AAFH,OAAP;;AAID,SAAKT,kBAAL;AACC,aAAO,EACN,GAAGW,KADG;AAENF,QAAAA,OAAO,EAAE,KAFH;AAGNL,QAAAA,IAAI,EAAEQ,MAAM,CAACP,OAHP;AAINE,QAAAA,KAAK,EAAE;AAJD,OAAP;;AAMD,SAAKT,kBAAL;AACC,aAAO,EACN,GAAGa,KADG;AAENF,QAAAA,OAAO,EAAE,KAFH;AAGNL,QAAAA,IAAI,EAAE,EAHA;AAING,QAAAA,KAAK,EAAEK,MAAM,CAACP;AAJR,OAAP;;AAMD;AACC,aAAOM,KAAP;AArBF;AAuBA,CAxBD;;AA0BA,IAAIE,GAAG,GAAG,sCAAV;AAEA,OAAO,MAAMC,SAAS,GAAIC,GAAD,IAAS;AACjC,SAAQC,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACf,gBAAD,CAAR;AACAL,IAAAA,KAAK,CACHqB,GADF,CACMJ,GAAG,GAAGE,GADZ,EAEEG,IAFF,CAEQC,QAAD,IAAc;AACnB,YAAMf,IAAI,GAAGe,QAAQ,CAACf,IAAtB;AACAY,MAAAA,QAAQ,CAACb,gBAAgB,CAACC,IAAD,CAAjB,CAAR;AACA,KALF,EAMEgB,KANF,CAMSb,KAAD,IAAW;AACjB,YAAMc,QAAQ,GAAGd,KAAK,CAACe,OAAvB;AACAN,MAAAA,QAAQ,CAACV,gBAAgB,CAACe,QAAD,CAAjB,CAAR;AACA,KATF;AAUA,GAZD;AAaA,CAdM;AAgBP,IAAIE,IAAI,GAAG,sCAAX;AACA,OAAO,MAAMC,eAAe,GAAIT,GAAD,IAAS;AACvC,SAAQC,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACf,gBAAD,CAAR;AACAL,IAAAA,KAAK,CACHqB,GADF,CACMM,IAAI,GAAGR,GADb,EAEEG,IAFF,CAEQC,QAAD,IAAc;AACnB,YAAMf,IAAI,GAAGe,QAAQ,CAACf,IAAtB;AACAY,MAAAA,QAAQ,CAACb,gBAAgB,CAACC,IAAD,CAAjB,CAAR;AACA,KALF,EAMEgB,KANF,CAMSb,KAAD,IAAW;AACjB,YAAMc,QAAQ,GAAGd,KAAK,CAACe,OAAvB;AACAN,MAAAA,QAAQ,CAACV,gBAAgB,CAACe,QAAD,CAAjB,CAAR;AACA,KATF;AAUA,GAZD;AAaA,CAdM;AAgBP,eAAeX,WAAf","sourcesContent":["import axios from 'axios'\nimport { useSelector } from 'react-redux'\nimport { FETCH_DATA_FAILURE, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS } from './dataTypes'\n\nexport const fetchDataRequest = () => {\n\treturn {\n\t\ttype: FETCH_DATA_REQUEST\n\t}\n}\n\nexport const fetchDataSuccess = (data) => {\n\treturn {\n\t\ttype: FETCH_DATA_SUCCESS,\n\t\tpayload: data\n\t}\n}\n\nexport const fetchDataFailure = (error) => {\n\treturn {\n\t\ttype: FETCH_DATA_FAILURE,\n\t\tpayload: error\n\t}\n}\n\nconst initialState = {\n\tloading: false,\n\tdata: {},\n\terror: ''\n}\n\nconst dataReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_DATA_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true\n\t\t\t}\n\t\tcase FETCH_DATA_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tdata: action.payload,\n\t\t\t\terror: ''\n\t\t\t}\n\t\tcase FETCH_DATA_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tdata: {},\n\t\t\t\terror: action.payload\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nlet url = 'http://localhost:3001/api/book?page='\n\nexport const fetchData = (num) => {\n\treturn (dispatch) => {\n\t\tdispatch(fetchDataRequest)\n\t\taxios\n\t\t\t.get(url + num)\n\t\t\t.then((response) => {\n\t\t\t\tconst data = response.data\n\t\t\t\tdispatch(fetchDataSuccess(data))\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconst errorMsg = error.message\n\t\t\t\tdispatch(fetchDataFailure(errorMsg))\n\t\t\t})\n\t}\n}\n\nlet url2 = 'http://localhost:3001/api/book?page='\nexport const fetchDataUpdate = (num) => {\n\treturn (dispatch) => {\n\t\tdispatch(fetchDataRequest)\n\t\taxios\n\t\t\t.get(url2 + num)\n\t\t\t.then((response) => {\n\t\t\t\tconst data = response.data\n\t\t\t\tdispatch(fetchDataSuccess(data))\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconst errorMsg = error.message\n\t\t\t\tdispatch(fetchDataFailure(errorMsg))\n\t\t\t})\n\t}\n}\n\nexport default dataReducer\n"]},"metadata":{},"sourceType":"module"}