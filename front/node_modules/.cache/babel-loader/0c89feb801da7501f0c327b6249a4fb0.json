{"ast":null,"code":"export const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const addToCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x._id === product._id) {\n      alreadyExists = true;\n      x.count++;\n    }\n  });\n\n  if (!alreadyExists) {\n    cartItems.push({ ...product,\n      count: 1\n    });\n  }\n\n  dispatch({\n    type: ADD_TO_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n}; // export const addToCart = (product) => (dispatch, getState) => {\n// \tconst cartItems = getState().cart.cartItems.slice()\n// \tcartItems.forEach((item) => {\n// \t\tlet alreadyInCart = false\n// \t\tif (item._id === product._id) {\n// \t\t\talreadyInCart = true\n// \t\t\titem.count++\n// \t\t}\n// \t\tif (!alreadyInCart) {\n// \t\t\tcartItems.push({ ...product, count: 1 })\n// \t\t}\n// \t})\n// \tdispatch({\n// \t\ttype: ADD_TO_CART,\n// \t\tpayload: {\n// \t\t\tcartItems\n// \t\t}\n// \t})\n// \tlocalStorage.setItem('cartItems', JSON.stringify(cartItems))\n// }\n\nexport const removeFromCart = book => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice().filter(item => item._id !== book._id);\n  dispatch({\n    type: REMOVE_FROM_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};","map":{"version":3,"sources":["/home/mgapinska/Dokumenty/books-shop-app/src/redux/cart/cart.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","addToCart","product","dispatch","getState","cartItems","cart","slice","alreadyExists","forEach","x","_id","count","push","type","payload","localStorage","setItem","JSON","stringify","removeFromCart","book","filter","item"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7D,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAmBC,CAAD,IAAO;AACxB,QAAIA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAAtB,EAA2B;AAC1BH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,CAAC,CAACE,KAAF;AACA;AACD,GALD;;AAMA,MAAI,CAACJ,aAAL,EAAoB;AACnBH,IAAAA,SAAS,CAACQ,IAAV,CAAe,EAAE,GAAGX,OAAL;AAAcU,MAAAA,KAAK,EAAE;AAArB,KAAf;AACA;;AACDT,EAAAA,QAAQ,CAAC;AACRW,IAAAA,IAAI,EAAEf,WADE;AAERgB,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFD,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACA,CAjBM,C,CAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMe,cAAc,GAAIC,IAAD,IAAU,CAAClB,QAAD,EAAWC,QAAX,KAAwB;AAC/D,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,GAAkCe,MAAlC,CAA0CC,IAAD,IAAUA,IAAI,CAACZ,GAAL,KAAaU,IAAI,CAACV,GAArE,CAAlB;AACAR,EAAAA,QAAQ,CAAC;AACRW,IAAAA,IAAI,EAAEd,gBADE;AAERe,IAAAA,OAAO,EAAE;AACRV,MAAAA;AADQ;AAFD,GAAD,CAAR;AAMAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACA,CATM","sourcesContent":["export const ADD_TO_CART = 'ADD_TO_CART'\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART'\n\nexport const addToCart = (product) => (dispatch, getState) => {\n\tconst cartItems = getState().cart.cartItems.slice()\n\tlet alreadyExists = false\n\tcartItems.forEach((x) => {\n\t\tif (x._id === product._id) {\n\t\t\talreadyExists = true\n\t\t\tx.count++\n\t\t}\n\t})\n\tif (!alreadyExists) {\n\t\tcartItems.push({ ...product, count: 1 })\n\t}\n\tdispatch({\n\t\ttype: ADD_TO_CART,\n\t\tpayload: { cartItems }\n\t})\n\tlocalStorage.setItem('cartItems', JSON.stringify(cartItems))\n}\n// export const addToCart = (product) => (dispatch, getState) => {\n// \tconst cartItems = getState().cart.cartItems.slice()\n// \tcartItems.forEach((item) => {\n// \t\tlet alreadyInCart = false\n// \t\tif (item._id === product._id) {\n// \t\t\talreadyInCart = true\n// \t\t\titem.count++\n// \t\t}\n\n// \t\tif (!alreadyInCart) {\n// \t\t\tcartItems.push({ ...product, count: 1 })\n// \t\t}\n// \t})\n// \tdispatch({\n// \t\ttype: ADD_TO_CART,\n// \t\tpayload: {\n// \t\t\tcartItems\n// \t\t}\n// \t})\n// \tlocalStorage.setItem('cartItems', JSON.stringify(cartItems))\n// }\n\nexport const removeFromCart = (book) => (dispatch, getState) => {\n\tconst cartItems = getState().cart.cartItems.slice().filter((item) => item._id !== book._id)\n\tdispatch({\n\t\ttype: REMOVE_FROM_CART,\n\t\tpayload: {\n\t\t\tcartItems\n\t\t}\n\t})\n\tlocalStorage.setItem('cartItems', JSON.stringify(cartItems))\n}\n"]},"metadata":{},"sourceType":"module"}